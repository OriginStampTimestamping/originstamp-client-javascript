
/*
 * OriginStamp Client
 *
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://docs.originstamp.com
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Notification'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Notification'));
  } else {
    // Browser globals (root is window)
    if (!root.OriginStamp) {
      root.OriginStamp = {};
    }
    root.OriginStamp.TimestampRequest = factory(root.OriginStamp.ApiClient, root.OriginStamp.Notification);
  }
}(this, function(ApiClient, Notification) {
  'use strict';

  /**
   * The TimestampRequest model module.
   * @module model/TimestampRequest
   * @version 3.0
   */

  /**
   * Constructs a new <code>TimestampRequest</code>.
   * request object for a timestamp request.
   * @alias module:model/TimestampRequest
   * @class
   * @param hash {String} Hash in HEX representation. We suggest to use SHA-256. This hash will be aggregated and included into the blockchain.
   */
  var exports = function(hash) {
    this.hash = hash;
  };

  /**
   * Constructs a <code>TimestampRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TimestampRequest} obj Optional instance to populate.
   * @return {module:model/TimestampRequest} The populated <code>TimestampRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('comment'))
        obj.comment = ApiClient.convertToType(data['comment'], 'String');
      if (data.hasOwnProperty('hash'))
        obj.hash = ApiClient.convertToType(data['hash'], 'String');
      if (data.hasOwnProperty('notifications'))
        obj.notifications = ApiClient.convertToType(data['notifications'], [Notification]);
    }
    return obj;
  }

  /**
   * You can add a short comment (max. 256 characters) which can be used for indexing and searching (public).
   * @member {String} comment
   */
  exports.prototype.comment = undefined;

  /**
   * Hash in HEX representation. We suggest to use SHA-256. This hash will be aggregated and included into the blockchain.
   * @member {String} hash
   */
  exports.prototype.hash = undefined;

  /**
   * Add a notification/notification list to your submission. Our system will notify the specified target with the timestamp information.
   * @member {Array.<module:model/Notification>} notifications
   */
  exports.prototype.notifications = undefined;


  return exports;

}));
