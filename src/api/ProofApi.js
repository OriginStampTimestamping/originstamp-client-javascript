
/*
 * OriginStamp Client
 *
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://docs.originstamp.com
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DefaultOfDownloadLinkResponse', 'model/ProofRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DefaultOfDownloadLinkResponse'), require('../model/ProofRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.OriginStamp) {
      root.OriginStamp = {};
    }
    root.OriginStamp.ProofApi = factory(root.OriginStamp.ApiClient, root.OriginStamp.DefaultOfDownloadLinkResponse, root.OriginStamp.ProofRequest);
  }
}(this, function(ApiClient, DefaultOfDownloadLinkResponse, ProofRequest) {
  'use strict';

  /**
   * Proof service.
   * @module api/ProofApi
   * @version 3.0
   */

  /**
   * Constructs a new ProofApi. 
   * @alias module:api/ProofApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getProof operation.
     * @callback module:api/ProofApi~getProofCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultOfDownloadLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Proof
     * Generates the download URL for Proof (Seed / Merkle Tree). This interface must be used to obtain the proof or certificate of your tamper-proof timestamp. The parameters are as follows: Cryptocurrency (e.g., Bitcoin, Ethereum,..), type of evidence (e.g., certificate, merkle tree) and the associated hash. The entries are analyzed, e.g., whether a valid timestamp exists for the hash. Then the URL and the filename are returned, with which your proof can be saved. Please note that the download link is only valid for 5 minutes. When using cURL to fetch the proof with the download link make sure to specify \"application/octet-stream\" in the \"Accept\" header.
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {module:model/ProofRequest} proofRequestUrl Information needed to return the proof.
     * @param {module:api/ProofApi~getProofCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultOfDownloadLinkResponse}
     */
    this.getProof = function(authorization, proofRequestUrl, callback) {
      var postBody = proofRequestUrl;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getProof");
      }

      // verify the required parameter 'proofRequestUrl' is set
      if (proofRequestUrl === undefined || proofRequestUrl === null) {
        throw new Error("Missing the required parameter 'proofRequestUrl' when calling getProof");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['API Key Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DefaultOfDownloadLinkResponse;

      return this.apiClient.callApi(
        '/v3/timestamp/proof/url', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
