
/*
 * OriginStamp Client
 *
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://docs.originstamp.com
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DefaultOfTimestampData', 'model/DefaultOfTimestampResponse', 'model/TimestampRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DefaultOfTimestampData'), require('../model/DefaultOfTimestampResponse'), require('../model/TimestampRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.OriginStamp) {
      root.OriginStamp = {};
    }
    root.OriginStamp.TimestampApi = factory(root.OriginStamp.ApiClient, root.OriginStamp.DefaultOfTimestampData, root.OriginStamp.DefaultOfTimestampResponse, root.OriginStamp.TimestampRequest);
  }
}(this, function(ApiClient, DefaultOfTimestampData, DefaultOfTimestampResponse, TimestampRequest) {
  'use strict';

  /**
   * Timestamp service.
   * @module api/TimestampApi
   * @version 3.0
   */

  /**
   * Constructs a new TimestampApi. 
   * @alias module:api/TimestampApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createTimestamp operation.
     * @callback module:api/TimestampApi~createTimestampCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultOfTimestampResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submission
     * With this interface you can submit your hash. If your API key is valid, your hash is added  seeds and scheduled for timestamping. You are also able to submit additional information, such as a comment or notification target. If the hash already exists, the 'created' field in the response is set to 'false' and any notification(s) for this hash will be ignored. To later query the status of the hash for a certain blockchain you can use the 'seed_id' field of its inner timestamp structure. This field can be used to query the timestamping status of the selected seed. This is recommended if a large number of hashes were transmitted in a certain time frame. Once a hash is successfully created for a certain crypto currency, we can notify your desired target with the timestamp information (via POST Request). A webhook is triggered as soon as the tamper-proof timestamp with the selected crypto currency has been created. 
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {module:model/TimestampRequest} timestampRequest DTO for the hash submission. Add all relevant information concerning your hash submission.
     * @param {module:api/TimestampApi~createTimestampCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultOfTimestampResponse}
     */
    this.createTimestamp = function(authorization, timestampRequest, callback) {
      var postBody = timestampRequest;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createTimestamp");
      }

      // verify the required parameter 'timestampRequest' is set
      if (timestampRequest === undefined || timestampRequest === null) {
        throw new Error("Missing the required parameter 'timestampRequest' when calling createTimestamp");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['API Key Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DefaultOfTimestampResponse;

      return this.apiClient.callApi(
        '/v4/timestamp/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHashStatus operation.
     * @callback module:api/TimestampApi~getHashStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultOfTimestampResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Status
     * This interface returns information of a certain hash read from the URL path. If the status of several hashes is to be checked, it is preferable to use the seed status interface. This reduces the required requests and can be tailored to a desired blockchain. All 'created' fields are always set to false for a status request.
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {String} hashString The hash in string representation.
     * @param {module:api/TimestampApi~getHashStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultOfTimestampResponse}
     */
    this.getHashStatus = function(authorization, hashString, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getHashStatus");
      }

      // verify the required parameter 'hashString' is set
      if (hashString === undefined || hashString === null) {
        throw new Error("Missing the required parameter 'hashString' when calling getHashStatus");
      }


      var pathParams = {
        'hash_string': hashString
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['API Key Authorization'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DefaultOfTimestampResponse;

      return this.apiClient.callApi(
        '/v4/timestamp/{hash_string}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSeedStatus operation.
     * @callback module:api/TimestampApi~getSeedStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultOfTimestampData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Seed Status
     * With this interface you can request the status for a certain seed. This is used when checking the status of previously submitted hashes and avoids sending individual status requests for each hash.
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {String} seedId ID of the timestamp seed
     * @param {module:api/TimestampApi~getSeedStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultOfTimestampData}
     */
    this.getSeedStatus = function(authorization, seedId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSeedStatus");
      }

      // verify the required parameter 'seedId' is set
      if (seedId === undefined || seedId === null) {
        throw new Error("Missing the required parameter 'seedId' when calling getSeedStatus");
      }


      var pathParams = {
        'seed_id': seedId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['API Key Authorization'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DefaultOfTimestampData;

      return this.apiClient.callApi(
        '/v4/timestamp/status/seed/{seed_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
