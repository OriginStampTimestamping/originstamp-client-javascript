
/*
 * OriginStamp Client
 *
 * OpenAPI spec version: 3.0
 * OriginStamp Documentation: https://docs.originstamp.com
 * Contact: mail@originstamp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DefaultOfVoid', 'model/DefaultOfWebhookResponse', 'model/DefaultOfstring', 'model/ManualWebhookRequest', 'model/WebhookRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DefaultOfVoid'), require('../model/DefaultOfWebhookResponse'), require('../model/DefaultOfstring'), require('../model/ManualWebhookRequest'), require('../model/WebhookRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.OriginStamp) {
      root.OriginStamp = {};
    }
    root.OriginStamp.WebhookApi = factory(root.OriginStamp.ApiClient, root.OriginStamp.DefaultOfVoid, root.OriginStamp.DefaultOfWebhookResponse, root.OriginStamp.DefaultOfstring, root.OriginStamp.ManualWebhookRequest, root.OriginStamp.WebhookRequest);
  }
}(this, function(ApiClient, DefaultOfVoid, DefaultOfWebhookResponse, DefaultOfstring, ManualWebhookRequest, WebhookRequest) {
  'use strict';

  /**
   * Webhook service.
   * @module api/WebhookApi
   * @version 3.0
   */

  /**
   * Constructs a new WebhookApi. 
   * @alias module:api/WebhookApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getWebhookStatus operation.
     * @callback module:api/WebhookApi~getWebhookStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultOfWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Webhook
     * RESTful interface to receive the status of a webhook. Based on the input parameters (target URL, hash and currency), we look up the most recent entry in the notification queue.This method is intended to support the webhook integration.
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {module:model/WebhookRequest} webhookRequest DTO for registering webhook information.
     * @param {module:api/WebhookApi~getWebhookStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultOfWebhookResponse}
     */
    this.getWebhookStatus = function(authorization, webhookRequest, callback) {
      var postBody = webhookRequest;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWebhookStatus");
      }

      // verify the required parameter 'webhookRequest' is set
      if (webhookRequest === undefined || webhookRequest === null) {
        throw new Error("Missing the required parameter 'webhookRequest' when calling getWebhookStatus");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['API Key Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DefaultOfWebhookResponse;

      return this.apiClient.callApi(
        '/v3/webhook/information', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerWebhookNotification operation.
     * @callback module:api/WebhookApi~registerWebhookNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultOfVoid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Webhook
     * Method which allows a subscription for a webhook notification. If this method is called, a new entry is added to notification queue that is triggered as soon as a tamper-proof timestamp or the hash is created. An empty data payload means that the entry was created successfully.
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {module:model/WebhookRequest} webhookRequest DTO for querying webhook information.
     * @param {module:api/WebhookApi~registerWebhookNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultOfVoid}
     */
    this.registerWebhookNotification = function(authorization, webhookRequest, callback) {
      var postBody = webhookRequest;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling registerWebhookNotification");
      }

      // verify the required parameter 'webhookRequest' is set
      if (webhookRequest === undefined || webhookRequest === null) {
        throw new Error("Missing the required parameter 'webhookRequest' when calling registerWebhookNotification");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['API Key Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DefaultOfVoid;

      return this.apiClient.callApi(
        '/v3/webhook/register', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerTimestampWebhook operation.
     * @callback module:api/WebhookApi~triggerTimestampWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultOfstring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dev
     * With this interface you can trigger manual webhook to see how a webhook looks like. Please use a hash, that was already timestamped before such as https://redir.originstamp.com/hash/9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08 . Usually, the webhook is triggered as soon as the tamper-proof time stamp with the selected crypto currency has been created.
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {module:model/ManualWebhookRequest} manualWebhookRequest DTO for webhook request.
     * @param {module:api/WebhookApi~triggerTimestampWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultOfstring}
     */
    this.triggerTimestampWebhook = function(authorization, manualWebhookRequest, callback) {
      var postBody = manualWebhookRequest;

      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling triggerTimestampWebhook");
      }

      // verify the required parameter 'manualWebhookRequest' is set
      if (manualWebhookRequest === undefined || manualWebhookRequest === null) {
        throw new Error("Missing the required parameter 'manualWebhookRequest' when calling triggerTimestampWebhook");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['API Key Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DefaultOfstring;

      return this.apiClient.callApi(
        '/v3/webhook/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
