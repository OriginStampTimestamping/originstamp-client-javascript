/**
 * OriginStamp API Documentation
 * The following documentation describes the API v3 for OriginStamp. OriginStamp is a trusted timestamping service that uses the decentralized blockchain to store anonymous, tamper-proof timestamps for any digital content. OriginStamp allows users to timestamp files, emails, or plain text, and subsequently store the created hashes in the blockchain as well as retrieve and verify timetamps that have been committed to the blockchain.The trusted timestamping service of OriginStamp allows you to generate a hash fingerprint and prove that it was created at a specific point in time. If you are interested in integrating trusted timestamping into your own project, feel free to use our provided API. The following interactive documentation describes the interfaces and supports your integration. With this documentation you are able to try out the different requests and see the responses. For the authorization, add your API key to the Authorization header of your request.<br/><h2>Timestamping Steps</h2><ol><li><strong>Determine Hash: </strong> Calculate the SHA-256 of your record using a cryptographic library.</li><li><strong>Create Timestamp: </strong>Create a timestamp and add meta information to index it, e.g. a comment. You can also request a notification (email or webhook) once the tamper-proof timestamp has been created.</li><li><strong>Archive original file: </strong>Since we have no access to your original data, you should archive it because the timestamp is only valid in combination with the original file.</li><li><strong>Check Timestamp Status: </strong>Since the timestamps are always transmitted to the blockchain network at certain times, i.e. there is a delay, you can check the status of a hash and thus get the timestamp information.</li><li><strong>Get Timestamp Proof: </strong>As soon as the tamper-proof timestamp has been generated, you should archive the proof (Merkle Tree), which we created in our open procedure, together with the original file. With this proof, the existence of the file can be verified independently of OriginStamp. Here you can choose if the raw proof (xml) is sufficient proof or if you want to have a certificate (pdf).</li></ol><br/><h2>Installation Notes</h2><ul><li>Make sure you set the Authorization header correctly using your API key.</li><li>If a Cloudflare error occurs, please set a custom UserAgent header.</li><li>Please have a look at the models below to find out what each field means.</li></ul>
 *
 * OpenAPI spec version: 3.0
 * Contact: mail@originstamp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DefaultOfWebhookResponse', 'model/WebhookRequest', 'model/ModelDefault', 'model/ManualWebhookRequest', 'model/DefaultOfstring'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DefaultOfWebhookResponse'), require('../model/WebhookRequest'), require('../model/ModelDefault'), require('../model/ManualWebhookRequest'), require('../model/DefaultOfstring'));
  } else {
    // Browser globals (root is window)
    if (!root.OriginStampApiDocumentation) {
      root.OriginStampApiDocumentation = {};
    }
    root.OriginStampApiDocumentation.WebhookApi = factory(root.OriginStampApiDocumentation.ApiClient, root.OriginStampApiDocumentation.DefaultOfWebhookResponse, root.OriginStampApiDocumentation.WebhookRequest, root.OriginStampApiDocumentation.ModelDefault, root.OriginStampApiDocumentation.ManualWebhookRequest, root.OriginStampApiDocumentation.DefaultOfstring);
  }
}(this, function(ApiClient, DefaultOfWebhookResponse, WebhookRequest, ModelDefault, ManualWebhookRequest, DefaultOfstring) {
  'use strict';

  /**
   * Webhook service.
   * @module api/WebhookApi
   * @version 3.0
   */

  /**
   * Constructs a new WebhookApi. 
   * @alias module:api/WebhookApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getWebhookStatus operation.
     * @callback module:api/WebhookApi~getWebhookStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultOfWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Webhook
     * RESTful interface to receive the status of a webhook. Based on the input parameters (target URL, hash and currency), we look up the most recent entry in the notification queue.This method is intended to support the webhook integration.
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {module:model/WebhookRequest} webhookRequest DTO for registering webhook information.
     * @param {module:api/WebhookApi~getWebhookStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultOfWebhookResponse}
     */
    this.getWebhookStatus = function(authorization, webhookRequest, callback) {
      var postBody = webhookRequest;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getWebhookStatus";
      }

      // verify the required parameter 'webhookRequest' is set
      if (webhookRequest == undefined || webhookRequest == null) {
        throw "Missing the required parameter 'webhookRequest' when calling getWebhookStatus";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['API Key Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DefaultOfWebhookResponse;

      return this.apiClient.callApi(
        '/v3/webhook/information', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerWebhookNotification operation.
     * @callback module:api/WebhookApi~registerWebhookNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelDefault} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Webhook
     * Method which allows a subscription for a webhook notification. If this method is called, a new entry is added to notification queue that is triggered as soon as a tamper-proof timestamp or the hash is created. An empty data payload means that the entry was created successfully.
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {module:model/WebhookRequest} webhookRequest DTO for querying webhook information.
     * @param {module:api/WebhookApi~registerWebhookNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelDefault}
     */
    this.registerWebhookNotification = function(authorization, webhookRequest, callback) {
      var postBody = webhookRequest;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling registerWebhookNotification";
      }

      // verify the required parameter 'webhookRequest' is set
      if (webhookRequest == undefined || webhookRequest == null) {
        throw "Missing the required parameter 'webhookRequest' when calling registerWebhookNotification";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['API Key Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelDefault;

      return this.apiClient.callApi(
        '/v3/webhook/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerTimestampWebhook operation.
     * @callback module:api/WebhookApi~triggerTimestampWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultOfstring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dev
     * With this interface you can trigger manual webhook to see how a webhook looks like. Please use a hash, that was already timestamped before such as https://redir.originstamp.com/hash/9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08 . Usually, the webhook is triggered as soon as the tamper-proof time stamp with the selected crypto currency has been created.
     * @param {String} authorization A valid API key is essential for authorization to handle the request.
     * @param {module:model/ManualWebhookRequest} manualWebhookRequest DTO for webhook request.
     * @param {module:api/WebhookApi~triggerTimestampWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultOfstring}
     */
    this.triggerTimestampWebhook = function(authorization, manualWebhookRequest, callback) {
      var postBody = manualWebhookRequest;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling triggerTimestampWebhook";
      }

      // verify the required parameter 'manualWebhookRequest' is set
      if (manualWebhookRequest == undefined || manualWebhookRequest == null) {
        throw "Missing the required parameter 'manualWebhookRequest' when calling triggerTimestampWebhook";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['API Key Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DefaultOfstring;

      return this.apiClient.callApi(
        '/v3/webhook/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
